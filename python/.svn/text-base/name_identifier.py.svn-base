#!/usr/local/bin/python
# -*- coding: utf-8 -*-
import re
def name_identifier2(a):
	isName = lambda x: x[0] == u"<" and x[-1] == u">"
#	s1 = re.sub(r"([^\.] )([A-Z]\w+( [A-Z]\w+)*)", r"\1<\2>", a, re.M)
	s1 = re.match(r"([^\.] )([A-Z]\w+( [A-Z]\w+)*)", r"\1<\2>", a, re.M)
	print s1.group()
	return s1
	

def name_identifier(a):
	"""Takes a file, and identifies PNs"""
	a = a.split()
	punct = u""
	index = 0	
	start = -1
	x = len(a) -1
	while index <= x:
		if a[index][0].isupper() == True:
		# If word starts with single Capital letter
			if not a[index-1].endswith('.') and not a[index-1].endswith(',') and index != 0:
			#if the word doesn't follow a '.' or ','
				if start == -1:
					a[index] = u"<"+ a[index]
					start = index
				#If there are several names in a row, they are concatenated.
									
			elif a[index-1].endswith(u','):
				#if the word follows a ',' it is distinct from whatever precedes it
				if start != -1:
					punct = (a[index-1][len(a[index-1])-1])
					a[index-1] = a[index-1][0:len(a[index-1])-1] + u">" + punct
					end = index
					punct = u""
					a[start] = u"_".join(a[start:end])
					if start != end -1:
						del a[start+1:end]
						index = start
						diff = end - start
						x = x - diff
					start = -1 
				a[index] = u"<"+ a[index]
				start = index
				
			elif a[index-1].endswith('.') and a[index-1][0].isupper() == True and len(a[index -1]) == 2: 
			# If preceding word is an initial, Word is still a name even after '.'(which is removed). 
				a[index-1] =  a[index-1][0:len(a[index-1])-1]
				#Removes punctuation from initial in index
			else:
			# Word at beginning of sentence.
				if start != -1:
					punct = (a[index-1][len(a[index-1])-1])
					#Remove last character
					a[index-1] = a[index-1][0:len(a[index-1])-1] + ">" + punct
					end = index
					punct = u""
					a[start] = u"_".join(a[start:end])
					if start != end -1:
						del a[start+1:end]
						index = start
						diff = end - start
						x = x - diff
					start = -1
			index = index +1
		else:
		# Non-capitalised
			if start != -1:
				if not (a[index-1][len(a[index-1])-1]).isalpha():
				#If name ends with a non-alphanumeric character
					punct = (a[index-1][len(a[index-1])-1])
					a[index-1] = a[index-1][0:len(a[index-1])-1] + ">" + punct
					#Remove last character
				else:
					a[index-1] = a[index-1] + u">" + punct
				end = index
				punct = u""
				a[start] = u"_".join(a[start:end])
				if start != end -1:
					del a[start+1:end]
					index = start
					diff = end - start
					x = x - diff
				start = -1
			index = index +1
	if start != -1:
	# If last word is a name
		if not (a[index][len(a[index])-1]).isalpha():
			#If name ends with a non-alphanumeric character
			punct = (a[index][len(a[index])-1])
			a[index] = a[index][0:len(a[index])-1] +u">" + punct
			#Remove last character
		else:
			a[index-1] = a[index-1] + u">" + punct
		end = index
		punct = u""
		a[start] = u"_".join(a[start:end])
		if start != end -1:
			del a[start+1:end]
			index = start
			diff = end - start
			x = x - diff
		start = -1
	
	output = u" ".join(a)
	return unicode(output)

if __name__ == "__main__":
	''' only for testing purposes '''
	from name_database import name_ident
	import re
	testData = unicode(open("../resources/8_sidor_otaggat.txt", "r").read(), "utf8")
	tagged = name_identifier(testData)
	
	def tokenize(input):
	    stripped = ""
	    output = []
	    ignore = False
	    for char in input:
	        if char not in "#$%&'()*+,-./:;=?@[\]^`{}~\"":
	            stripped += char
	    stripped = re.sub("\s+", " ", stripped)
	            
	    return stripped.split(" ")
	
	isName = lambda x: x[0] == u"<" and x[-1] == u">"
	print "%-20s%-20s" % ("Name", "Filename")
	for word in tokenize(tagged):
		if isName(word):
			print "%-20s%-20s" % (word, name_ident(word.replace("_", " ")[1:-1]))
			
	
    